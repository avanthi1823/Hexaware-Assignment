ASSIGNMENT 2 - Student Information System (SIS)
TASK 1
1.
Create Database SISDB;
use SISDB;

2.
a.Create Table Students (
    student_id int primary key ,
    first_name varchar(50),
    last_name varchar(50),
    date_of_birth varchar(15),
    email varchar(50),
    phone_number varchar(15)
);

b.Create Table Teacher (
    teacher_id int primary key,
    first_name varchar(50),
    last_name varchar(50),
    email varchar(100) 
);

 c.Create Table Courses (
    course_id int primary key,
    course_name varchar(100),
    credits int,
    teacher_id int,
    foreign key(teacher_id) references Teacher(teacher_id)
);

d.Create Table Enrollments (
    enrollment_id int primary key,
    student_id int,
    course_id int,
    enrollment_date varchar(50),
    foreign key (student_id) references students(student_id),
    foreign key (course_id) references courses(course_id)
);

e.Create Table Payments (
    payment_id int primary key ,
    student_id int,
    amount decimal(10, 2),
    payment_date varchar(50)
    foreign key (student_id) references students(student_id)
);

3. Create an ERD (Entity Relationship Diagram) for the database.

4.5,

a.Insert into Students (student_id,first_name, last_name, date_of_birth, email, phone_number) values
('101','Varun', 'Kumar', '2001-08-13', 'varunkumar@gmail.com', '9856739210'),
('102','Lakshmi', 'Praba', '2001-09-12', 'lakshmipraba@gmail.com', '9978322991'),
('103','Vanitha', 'Suresh', '2001-08-19', 'vanitha@gmail.com', '9932823135'),
('104','Divya', 'Kannan', '2001-11-08', 'divya@gmail.com', '9973256182'),
('105','Ram', 'Nishanth', '2001-09-19', 'ram@gmail.com', '9976471881'),
('106','Ragavi', 'Ramesh', '2001-09-29', 'ragavir@gmail.com', '9972189881'),
('107','Dhanushree', 'Durai', '2001-07-19', 'dhanushree@gmail.com', '9966471881'),
('108','Bharath', 'Raju', '2001-08-11', 'bharath@gmail.com', '8825871881'),
('109','Raja', 'Sekar', '2001-08-27', 'rajas@gmail.com', '9896479221'),
('110','Naveen', 'Raj', '2001-11-18', 'naveen@gmail.com', '9372821881');
select*from Students

b.Insert into Teacher (teacher_id, first_name, last_name, email) VALUES
(201, 'Nithish', 'Kumar', 'nithishkumar@gmail.com'),
(202, 'Meena', 'Ravi', 'meenravi@gmail.com'),
(203, 'Suresh', 'Babu', 'sureshbabu@gmail.com'),
(204, 'Priya', 'Venkatesh', 'priyav@gmail.com'),
(205, 'Raj', 'Mohan', 'rajmohan@gmail.com'),
(206, 'Revathi', 'Ramesh', 'revathi@gmail.com'),
(207, 'Karthik', 'Sundar', 'karthik@gmail.com'),
(208, 'Uma', 'Devi', 'umadevi@gmail.com'),
(209, 'Nithya',' Raja','nithya@gmail.com'),
(210, 'Lavanya', 'Natarajan', 'lavanyan@gmail.com');
select*from Teacher

c. Insert into Courses (course_id,course_name, credits, teacher_id) VALUES
('1001','English Communication', 2, 201),
('1002','Mathematics', 4, 202),
('1003','Compiler Design', 4,203),
('1004','Machin Learning', 2, 206),
('1005','Cybser Security', 3,205),
('1006','Database Management Systems', 4, 204),
('1007','Web Technologies', 3, 209),
('1008','Data Structures', 4, 207),
('1009','Principles of Management',3,208),
('1010','Environmental Studies', 2, 210);
select*from Courses

d. Insert into Enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES
(1, 101, 1001, '2023-06-01'),
(2, 102, 1002, '2023-06-02'),
(3, 103, 1003, '2023-06-03'),
(4, 104, 1004, '2023-06-05'),
(5, 105, 1005, '2023-06-06'),
(6, 106, 1006, '2023-06-07'),
(7, 107, 1007, '2023-06-08'),
(8, 108, 1008, '2023-06-09'),
(9, 109, 1009, '2023-06-10'),
(10, 110, 1010, '2023-06-11');
select*from Enrollments

 e. Insert into Payments (payment_id, student_id, amount, payment_date) VALUES
(501, 101, 10000, '2023-06-01'),
(502, 102, 10000, '2023-06-02'),
(503, 103, 10000, '2023-06-03'),
(504, 104, 13000, '2023-06-05'),
(505, 105, 14000, '2023-06-06'),
(506, 106, 14000, '2023-06-07'),
(507, 107, 12500, '2023-06-08'),
(508, 108, 13500, '2023-06-09'),
(509, 109, 14500, '2023-06-10'),
(510, 110, 9000, '2023-06-11');
Select*from Payments



TASK 2

1.
 Insert into Students (student_id,first_name, last_name, date_of_birth, email, phone_number)values ('111','John', 'Doe', '1995-08-15', 'john.doe@example.com', '1234567890');

2.
 Insert into Enrollments (enrollment_id, student_id, course_id, enrollment_date)values (11, 102, 1002, '2024-06-13');

3.
 Update Teacher set email = 'raj.mohan@gmail.com' where teacher_id = 205;

4.
 Delete from Enrollments where student_id = 102 and course_id = 1002;

5.	
  Update Courses Set teacher_id = 205 where course_id = 1002;
 
6.
  Delete from Enrollments WHERE student_id = 110;
  Delete from Payments WHERE student_id = 110;
  Delete from Students WHERE student_id = 110;

7.	
 Update Payments set amount = 7500 Where payment_id = 501;


TASK 3

1.
Select  s.student_id,  s.first_name, s.last_name,SUM(p.amount) AS total_payments From  Students s JOIN  Payments p ON s.student_id = p.student_id Where  s.student_id =104 group by   s.student_id, s.first_name, s.last_name;

2.
Select  c.course_name, COUNT(e.student_id) AS total from Courses c JOIN Enrollments e ON c.course_id = e.course_id Group by c.course_name order by total desc;

3.	
Select s.student_name from Students s LEFT JOIN Enrollments e ON s.student_id = e.student_id Where e.course_id Is null;

4.	
Select   s.first_name,  s.last_name, c.course_name from Students s JOIN Enrollments e ON     s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id;

5.	
Select  t.first_name,  t.last_name, c.course_name from Teacher t LEFT JOIN Courses c ON   t.teacher_id = c.teacher_id;

6.
Select  s.first_name, s.last_name, e.enrollment_date From Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Mathematics';  	

7.	.
Select   s.first_name,   s.last_name FROM Students s LEFT JOIN Payments p ON   s.student_id = p.student_id WHERE   p.payment_id is null;

8.
Select c.course_id, c.course_name FROM Courses c LEFT JOIN  Enrollments e ON c.course_id = e.course_id WHERE e.course_id is null;

9.
Select s.student_id, s.first_name, s.last_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id Group by s.student_id, s.first_name, s.last_name Having COUNT(e.course_id) > 1;

10.	
Select .teacher_id, t.first_name, t.last_name from Teacher t LEFT JOIN Courses c ON t.teacher_id = c.teacher_id Wheree c.course_id is null;


TASK 4

1.    
Select course_id, Count(student_id)  From Enrollments Group by course_id;

2.
Select student_id FROM Payments  WHERE amount IN (select  MAX(amount) From    Payments);

3.
Select course_id from  Enrollments Group By course_id HAVING COUNT(*) = (    Selecct MAX(cnt)  FROM (SELECT course_id, COUNT(*) AS cnt FROM Enrollments Group by course_id) AS counts);

4.	
Select teacher_id, sum(amount) AS total_payment from Payments
Where course_id IN ( SELECT course_id FROM Courses)group by teacher_id;

5.	 
Select student_id FROM Enrollments Group by student_id HAVING COUNT(*) = (select COUNT(*) from Courses)

6.        
Select  teacher_name from Teachers Where teacher_id NOT IN ( SELECT teacher_id  FROM Courses WHERE teacher_id Is not null);

7.	
Select AVG(YEAR(GETDATE()) - YEAR(date_of_birth)) AS avg_age From Students;

8.	 
Select course_name from CoursesWHERE course_id not in (SELECT course_id     from Enrollments);

9.
Select student_id, course_id, sum(amount) as total_payment from Payments Group by student_id, course_id;

10.	  
Select s.student_name, SUM(p.amount) AS total_payment from Students s JOIN       Payments p ON s.student_id = p.student_id group by s.student_name;

11.
Select  s.student_name, SUM(p.amount) AS total_payment from  Students s
Join Payments p ON s.student_id = p.student_id group by s.student_name;

12.	 
Select c.course_name, COUNT(e.student_id) AS total_enrolled from Courses c
JOIN Enrollments e ON c.course_id = e.course_id group by c.course_name;

13.	
Select s.student_name, AVG(p.amount) AS avg_payment From Students s JOIN Payments p ON s.student_id = p.student_id Group by s.student_name;
